
==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 98, types: 59, coercions: 14, joins: 0/0}

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl :: Int
[GblId, Unf=OtherCon []]
lvl = GHC.Types.I# 12#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl1 :: Int
[GblId, Unf=OtherCon []]
lvl1 = GHC.Types.I# 8#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl2 :: Int
[GblId, Unf=OtherCon []]
lvl2 = GHC.Types.I# 9#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl3 :: GHC.Prim.Addr#
[GblId, Unf=OtherCon []]
lvl3 = "T20103.hs"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl4 :: [Char]
[GblId]
lvl4 = GHC.CString.unpackCString# lvl3

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
T20103.$trModule2 :: GHC.Prim.Addr#
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
T20103.$trModule2 = "T20103"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl5 :: [Char]
[GblId]
lvl5 = GHC.CString.unpackCString# T20103.$trModule2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
T20103.$trModule4 :: GHC.Prim.Addr#
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
T20103.$trModule4 = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl6 :: [Char]
[GblId]
lvl6 = GHC.CString.unpackCString# T20103.$trModule4

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl7 :: SrcLoc
[GblId, Unf=OtherCon []]
lvl7 = GHC.Stack.Types.SrcLoc lvl6 lvl5 lvl4 lvl1 lvl2 lvl1 lvl

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl8 :: GHC.Prim.Addr#
[GblId, Unf=OtherCon []]
lvl8 = "foo"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl9 :: [Char]
[GblId]
lvl9 = GHC.CString.unpackCString# lvl8

Rec {
-- RHS size: {terms: 36, types: 29, coercions: 14, joins: 0/0}
T20103.$wfoo [InlPrag=[2], Occ=LoopBreaker]
  :: HasCallStack => GHC.Prim.Int# -> GHC.Prim.Int#
[GblId[StrictWorker([!, ~])],
 Arity=2,
 Str=<1L><1L>,
 Unf=OtherCon []]
T20103.$wfoo
  = \ ($dIP
         :: HasCallStack
         Unf=OtherCon [])
      (ww :: GHC.Prim.Int#) ->
      case ww of ds {
        __DEFAULT ->
          case $dIP
               `cast` (GHC.Classes.N:IP[0] <"callStack">_N <CallStack>_N
                       :: (?callStack::CallStack) ~R# CallStack)
          of wild1 {
            __DEFAULT ->
              T20103.$wfoo
                ((GHC.Stack.Types.PushCallStack lvl9 lvl7 wild1)
                 `cast` (Sym (GHC.Classes.N:IP[0] <"callStack">_N <CallStack>_N)
                         :: CallStack ~R# (?callStack::CallStack)))
                (GHC.Prim.-# ds 1#);
            GHC.Stack.Types.FreezeCallStack ds1 ->
              T20103.$wfoo
                (wild1
                 `cast` (Sym (GHC.Classes.N:IP[0] <"callStack">_N <CallStack>_N)
                         :: CallStack ~R# (?callStack::CallStack)))
                (GHC.Prim.-# ds 1#)
          };
        0# ->
          case getCallStack
                 ($dIP
                  `cast` (GHC.Classes.N:IP[0] <"callStack">_N <CallStack>_N
                          :: (?callStack::CallStack) ~R# CallStack))
          of {
            [] -> case GHC.List.badHead of wild1 { };
            : x ds1 -> case x of { (x1, ds2) -> GHC.List.$wlenAcc @Char x1 0# }
          }
      }
end Rec }

-- RHS size: {terms: 12, types: 5, coercions: 0, joins: 0/0}
foo [InlPrag=[2]] :: HasCallStack => Int -> Int
[GblId,
 Arity=2,
 Str=<1L><1!P(1L)>,
 Cpr=1,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ ($dIP [Occ=Once1] :: HasCallStack)
                 (eta [Occ=Once1!] :: Int) ->
                 case eta of { GHC.Types.I# ww [Occ=Once1] ->
                 case T20103.$wfoo $dIP ww of ww1 [Occ=Once1] { __DEFAULT ->
                 GHC.Types.I# ww1
                 }
                 }}]
foo
  = \ ($dIP :: HasCallStack) (eta :: Int) ->
      case eta of { GHC.Types.I# ww ->
      case T20103.$wfoo $dIP ww of ww1 { __DEFAULT -> GHC.Types.I# ww1 }
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
T20103.$trModule3 :: GHC.Types.TrName
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
T20103.$trModule3 = GHC.Types.TrNameS T20103.$trModule4

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
T20103.$trModule1 :: GHC.Types.TrName
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
T20103.$trModule1 = GHC.Types.TrNameS T20103.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
T20103.$trModule :: GHC.Types.Module
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
T20103.$trModule
  = GHC.Types.Module T20103.$trModule3 T20103.$trModule1



